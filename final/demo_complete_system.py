"""
Demonstra√ß√£o Completa do Sistema BCI
Script que inicia o simulador EEG e o sistema BCI para uma demonstra√ß√£o completa
"""

import sys
import time
import threading
import subprocess
from pathlib import Path
import argparse

# Adicionar pasta final ao path
sys.path.append(str(Path(__file__).parent))

from eeg_simulator import EEGDataSimulator

def run_bci_system(model_path: str, duration: float = 60.0):
    """Executar o sistema BCI em um processo separado"""
    try:
        cmd = [
            sys.executable, 
            str(Path(__file__).parent / "complete_bci_system.py"),
            "--model", model_path,
            "--host", "localhost",
            "--port", "12345"
        ]
        
        print(f"üöÄ Iniciando sistema BCI...")
        print(f"üìÇ Comando: {' '.join(cmd)}")
        
        # Executar como processo separado
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            bufsize=1,
            universal_newlines=True
        )
        
        # Aguardar um pouco para o sistema inicializar
        time.sleep(3)
        
        return process
        
    except Exception as e:
        print(f"‚ùå Erro ao iniciar sistema BCI: {e}")
        return None

def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    parser = argparse.ArgumentParser(description='Demonstra√ß√£o Completa do Sistema BCI')
    parser.add_argument('--model', type=str, required=True, help='Caminho para o modelo .pt')
    parser.add_argument('--duration', type=float, default=60.0, help='Dura√ß√£o da demo (segundos)')
    parser.add_argument('--sim-only', action='store_true', help='Apenas simulador, sem BCI')
    
    args = parser.parse_args()
    
    # Verificar se o modelo existe
    model_path = Path(args.model)
    if not model_path.exists():
        print(f"‚ùå Modelo n√£o encontrado: {model_path}")
        print(f"üí° Modelos dispon√≠veis:")
        models_dir = Path.cwd() / "models"
        if models_dir.exists():
            for model_file in models_dir.glob("*.pt"):
                print(f"   - {model_file}")
        return
    
    print(f"üé≠ DEMONSTRA√á√ÉO COMPLETA DO SISTEMA BCI")
    print(f"=" * 60)
    print(f"üìÇ Modelo: {model_path}")
    print(f"‚è±Ô∏è Dura√ß√£o: {args.duration} segundos")
    print(f"üéÆ Simulador: Dados EEG sint√©ticos")
    print(f"üß† Sistema BCI: Predi√ß√µes em tempo real")
    print(f"=" * 60)
    
    bci_process = None
    
    try:
        # Iniciar sistema BCI se n√£o for apenas simulador
        if not args.sim_only:
            bci_process = run_bci_system(str(model_path), args.duration)
            if bci_process is None:
                print(f"‚ùå Falha ao iniciar sistema BCI")
                return
            
            print(f"‚úÖ Sistema BCI iniciado (PID: {bci_process.pid})")
        
        # Aguardar um pouco para o sistema BCI inicializar
        if bci_process:
            print(f"‚è≥ Aguardando sistema BCI inicializar...")
            time.sleep(5)
        
        # Criar e iniciar simulador EEG
        print(f"üéÆ Iniciando simulador EEG...")
        simulator = EEGDataSimulator(
            host='localhost',
            port=12345,
            sample_rate=125.0,
            n_channels=16
        )
        
        # Iniciar simula√ß√£o
        print(f"üì° Come√ßando transmiss√£o de dados simulados...")
        simulator.start_simulation(duration=args.duration)
        
        # Aguardar conclus√£o
        if bci_process:
            print(f"‚è≥ Aguardando sistema BCI finalizar...")
            bci_process.wait(timeout=10)
    
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è Demonstra√ß√£o interrompida pelo usu√°rio")
    
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o: {e}")
    
    finally:
        # Limpar recursos
        if bci_process:
            try:
                bci_process.terminate()
                bci_process.wait(timeout=5)
                print(f"‚úÖ Sistema BCI finalizado")
            except:
                bci_process.kill()
                print(f"üî™ Sistema BCI for√ßado a parar")
        
        print(f"üèÅ Demonstra√ß√£o conclu√≠da!")

if __name__ == "__main__":
    main()
